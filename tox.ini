[tox]
envlist = py38,docs,manifest,check-formatting,lint
skipsdist = True
usedevelop = True

[testenv]
basepython = python3.8
deps =
    -r{toxinidir}/dev-requirements.txt
    -e .
commands =
    coverage run -m pytest {posargs}

[testenv:manifest]
; a safety check for source distributions
basepython = python3.8
deps = check-manifest
skip_install = true
commands = check-manifest

[testenv:check-formatting]
basepython = python3.8
deps = ruff==0.2.2
skip_install = true
commands =
    ruff format src/daaf tests --line-length 88 --diff --check

[testenv:format]
basepython = python3.8
deps = ruff==0.2.2
skip_install = true
commands =
    ruff format src/daaf tests --line-length 88

[testenv:lint]
; feel free to add flake8 plugins (i.e. flake8-import-order), add isort,
; or use another linter of your choice
basepython = python3.8
deps = ruff==0.2.2
skip_install = true
commands = ruff check

; The sections defined below are for configuring specific tools that are used
; in the above testenvs. Usually, if the tool is ran directly/outside of tox,
; i.e. `(env) $ pytest`, it will still pick up this configuration.

[testenv:lint-types]
basepython = python3.8
deps = mypy
skip_install = true
setenv =
    MYPYPATH = $PYTHONPATH:{toxinidir}/src:{toxinidir}/tests
commands =
  mypy {toxinidir}/src --install-types
  mypy {toxinidir}/tests --install-types

; The sections defined below are for configuring specific tools that are used
; in the above testenvs. Usually, if the tool is ran directly/outside of tox,
; i.e. `(env) $ pytest`, it will still pick up this configuration.

[pytest]
addopts = -v --cov=daaf --cov-report=xml:cobertura/coverage.xml --cov-report=term-missing --junitxml=junit.xml
testpaths = tests
